@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills flex-column">
    <li class="nav-item"><a class="nav-link @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index">Perfil</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email">Email</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">Password</a></li>


    @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="nav-item"><a class="nav-link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">Autenticação de dois Fatores</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">Informação pessoal</a></li>


    @if (User.IsInRole("Cliente"))
    {
        <li class="nav-item"><a class="nav-link" asp-page="/ClientePage">Cliente Page</a></li>

    }

    @if (User.IsInRole("Administrador"))
    {
        <li class="nav-item"><a class="nav-link" asp-page="/AdminPage">Admin Page</a></li>
    }

    @if (User.IsInRole("Funcionario"))
    {
        <li class="nav-item"><a class="nav-link" asp-page="/FuncionarioPage">Funcionario Page</a></li>
    }

    @if (User.IsInRole("Gestor"))
    {
        <li class="nav-item"><a class="nav-link" asp-page="/GestorPage">Gestor Page</a></li>

    }

</ul>